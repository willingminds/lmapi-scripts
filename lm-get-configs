#! /usr/bin/perl

# lm-get-configs
# 
# This script uses the LogicMonitor REST API to dump all device configuration files for
# local archiving, searching and reporting purposes.

#------------------------------------------------------------------------------
# Copyright (c) 2018 by Willing Minds LLC
# All Rights Reserved.
#
# 1240 N. Van Buren Street #107
# Anaheim, CA 92807
#
# 714-630-4772 (voice)
# 714-860-4940 (fax)
#
# http://www.willingminds.com/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#------------------------------------------------------------------------------


use FindBin qw($Script $Bin);
use LWP 5.8;
use Getopt::Long;
use Data::Dumper;
use Text::CSV_XS;
use Time::HiRes qw(time);
use IO::File;
use Cisco::Reconfig ();

use lib "$Bin";
use WM::LMAPI;

use strict;
use warnings;

#------------------------------------------------------------------------------

# option defaults
my $DRYRUN = 0;
my $VERBOSE = 0;
my $COMPANY;
my $CLIENT = "wm.client";

Getopt::Long::Configure ("bundling");

GetOptions(
    "dryrun|n"		=> \$DRYRUN,
    "verbose|v+"	=> \$VERBOSE,
    "company|c=s"	=> \$COMPANY,
    "client|C=s"	=> \$CLIENT,	# property name identifying client
) or die;

die "ERROR: must define company\n" if not defined($COMPANY);

if ($DRYRUN) {
    warn "DRY RUN MODE: NO CHANGES WILL BE COMMITTED TO LM API VIA PUT\n";
}

sub verbose ($@) {
    my $minverbose = shift;
    print join("", @_) if $VERBOSE >= $minverbose;
}

my $lmapi = WM::LMAPI->new(company => $COMPANY) or die;

my %table;
my %columns;

my $query_total = 0;
my $query_cs = 0;

my $devices  = $lmapi->get_all(path => "/device/devices", fields => "id,systemProperties,displayName");
DEVICE:
for my $device (@$devices) {
    my $query_start = time;
    my $devicedatasources  = $lmapi->get_all(path => "/device/devices/$device->{id}/devicedatasources", filter=>"dataSourceType:CS", fields => "id,dataSourceName");
    my $query_end = time;
    $query_total += ($query_end - $query_start);
    my $devicename = $device->{displayName};
    my $properties = $lmapi->get_all(path => "/device/devices/$device->{id}/properties");
    my $sysinfo = getprop($properties, 'system.sysinfo');

    if (@$devicedatasources) {
	# determine client name (must be defined in a custom property (CLIENT) -- LM has no actual multitenancy support)

	if (my $client = getprop($properties, $CLIENT)) {
	    # validate input string
	    if ($client !~ /^\w+$/) {
		warn "ERROR: $client: $devicename: invalid value for $CLIENT\n";
		next DEVICE;
	    }

	    # ensure target directory exists
	    my $dirname = "$COMPANY-$client";
	    if (not -d $dirname) {
		if (not mkdir($dirname)) {
		    warn "ERROR: $dirname: unable to create directory: $!\n";
		    next DEVICE;
		}
	    }

	    # copy LMConfig data for this device
	    for my $devicedatasource (@$devicedatasources) {
		$query_cs++;

		# dump metadata
		my $configSourceName = $devicedatasource->{dataSourceName};
		if (length $configSourceName) {
		    my $label = "$devicename.dataSourceName";
		    if (my $fh = IO::File->new(">$dirname/$label")) {
			print $fh "$configSourceName\n";
		    }
		    else {
			warn "ERROR: $dirname/$label: $!\n";
		    }
		}

		# dump configuration instances
		my $instances = $lmapi->get_all(path => "/device/devices/$device->{id}/devicedatasources/$devicedatasource->{id}/instances");
		INSTANCE:
		for my $instance (@$instances) {
		    if (defined $instance->{id}) {
			my $config = $lmapi->get_all(path => "/device/devices/$device->{id}/devicedatasources/$devicedatasource->{id}/instances/$instance->{id}/config", sort => '-version', size => 1);
			for my $c (@$config) {
			    my $instancename = $c->{instanceName};
			    my $label = "$devicename.$instancename";
			    $label =~ s:/:_:g;	# needed for filepath instances, like SFTP_Files
			    verbose 2, "label=$label\n";
			    if ($label =~ /^[\w._-]+$/) {
				# trim trailing whitespace from all lines
				$c->{config} =~ s/\s*$//smg;

				# preprocess results since LM cannot seem to program properly
				if ($configSourceName eq "Cisco_IOS") {
				    $c->{config} =~ s/\s*^Press RETURN to get started\.\Z//smi;
				    $c->{config} =~ s/\s*^\S+ tty\d+ is now available\Z//smi;
				    # new idiocy introduced in Cisco_IOS 0.0.31
				    $c->{config} =~ s/\ANo view is active ! Currently in Privilege Level Context\s*//smi;
				    if ($c->{config} =~ /^line con ([1-9].*)/m) {
					warn "ERROR: $dirname/$label: bogus 'line con $1' in config due to LM bugs, skipping\n";
					next INSTANCE;
				    }
				    
				    ### DISABLED FOR NOW - Cisco::Reconfig failing on too many inputs
				    if (0 and $sysinfo =~ /^Cisco IOS/ and $instancename =~ /-config$/) {
					eval {
					    if (my $parsed_config = Cisco::Reconfig::stringconfig($c->{config})) {
						$parsed_config->set("line aux 0", "speed", undef);
						$c->{config} = $parsed_config->alltext();
					    }
					};
					if ($@) {
					    warn "ERROR: unable to parse $label: $@\n";
					}
				    }
				}
				elsif ($configSourceName eq "SonicWall_SonicOS") {
				    # LM code creates new versions each time for "chatter" changes (e.g., scramble key, timestamps, etc.).
				    $c->{config} =~ s/^system-(?:up)?time\s+"[^"]+"$//smig;
				    # Encoded passwords can be 48, 80, 144 characters or longer
				    $c->{config} =~ s/(\s+4,)[0-9a-f]{48}$/$1<<SUPPRESSED>>/smig;
				    $c->{config} =~ s/(\s+4,)[0-9a-f]{64}$/$1<<SUPPRESSED>>/smig;
				    $c->{config} =~ s/(\s+4,)[0-9a-f]{80}$/$1<<SUPPRESSED>>/smig;
				    $c->{config} =~ s/(\s+4,)[0-9a-f]{144,}$/$1<<SUPPRESSED>>/smig;
				    $c->{config} =~ s/^checksum\s+\d+$//smig;
				}
				elsif ($configSourceName eq "Fortinet_FortiOS") {
				    # strip encoded passwords (change regularly due to scramble key updates)
				    $c->{config} =~ s:\b(ENC\s+)[a-z0-9+/]{32,}==$:$1<<SUPPRESSED>>:smig;
				}

				if ($c->{config} =~ /^\s*$/s) {
				    warn "ERROR: $dirname/$label: empty result, skipping\n";
				}
				elsif ($c->{config} =~ /^false$/) {
				    warn "ERROR: $dirname/$label: bogus 'false' result, skipping\n";
				}
				elsif ($c->{config} =~ /^(%Error.*)$/im) {
				    warn "ERROR: $dirname/$label: skipping due to error: $1\n";
				}
				elsif ($c->{config} =~ /^(Unable to get configuration|configuration change in progress)/im) {
				    warn "ERROR: $dirname/$label: skipping due to error: $1\n";
				}
				elsif ($c->{config} =~ /^(The flash device is in use by another task.*)/im) {
				    warn "ERROR: $dirname/$label: skipping due to error: $1\n";
				}
				else {
				    if (my $fh = IO::File->new(">$dirname/$label")) {
					print $fh $c->{config}, "\n";
				    }
				    else {
					warn "ERROR: open $dirname/$label: $!\n";
				    }
				}
				verbose 3, Dumper([sort keys %$c]);
			    }
			    else {
				warn "ERROR: $dirname/$label: invalid label format, skipping\n";
			    }
			}
		    }
		}
	    }
	}
	else {
	    warn "ERROR: $devicename: $CLIENT property undefined\n";
	    next DEVICE;
	}
    }
}
verbose 1, sprintf("%s: queried %d devices for %d ConfigSources in %.1f seconds\n", $COMPANY, scalar @{$devices}, $query_cs, $query_total);

exit;

sub getprop {
    my $properties = shift;
    my $name = shift;

    my $pval = (map { $_->{value} } grep { $_->{name} eq $name } @{$properties})[0];

    return $pval;
}
